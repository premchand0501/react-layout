{"version":3,"sources":["assets/img/user.png","utilities/utility.js","components/Task/TaskItem.js","store/actions/taskGroupActions.js","components/UI/Draggable.js","components/Task/TaskColumn.js","components/UI/Droppable.js","components/Task/TaskGridView.js","components/Task/TaskList.js","components/Task/TaskGroup.js","components/Navbar/Navbar.js","components/Task/TaskGroupList.js","components/User/User.js","App.js","serviceWorker.js","store/reducers/taskGroupReducer.js","assets/json/task.js","store/reducers/index.js","index.js"],"names":["module","exports","months","getDateFormatted","dataString","date","Date","month","getMonth","day","getDate","sortTasksByDate","_taskList","order","forEach","task","startTimestamp","startDate","getTime","endTimestamp","endDate","sort","a","b","reverse","sortTasksByPriority","sortedByPriority","priority","sortTasksByUser","assignee","id","priorities","TaskItem","taskListItem","toggleTaskStatus","taskGroupData","className","type","onChange","status","checked","subTaskName","src","profileImage","require","alt","title","name","taskListActionTypes","Draggable","children","handleDragStart","onDragStart","e","draggable","connect","dispatch","taskGroupId","taskListItemId","taskId","onDragOver","preventDefault","role","style","width","Droppable","handleDrop","onDrop","target","classList","contains","remove","onMouseLeave","add","state","taskGroupReducer","dropEl","border","icon","faPlus","taskList","filter","item","map","index","key","view","flag","sortBy","currentFilter","onClick","transform","faArrowDown","faUser","sortByDueDate","toggleView","withRouter","match","params","taskName","faList","faColumns","Navbar","faBars","to","taskGroupList","length","creator","User","App","exact","path","component","TaskGroupList","TaskGroup","React","Component","Boolean","window","location","hostname","sortTaskListing","taskGroupState","currentTaskId","sortingFunc","s","n","_taskGroupState","action","t","currentTaskGroup","parseInt","rootReducer","combineReducers","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cda9da97.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/user.64ac9ec3.png\";","const months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n\nexport const getDateFormatted = (dataString) => {\n  let date = new Date(dataString);\n  let month = months[date.getMonth()];\n  let day = date.getDate();\n  // let year = date.getFullYear();\n  return `${month} ${day}`;\n}\n\nexport const sortTasksByDate = (_taskList, order) => {\n  _taskList.forEach(task => {\n    task.startTimestamp = new Date(task.startDate).getTime();\n    task.endTimestamp = new Date(task.endDate).getTime();\n  });\n  const sortedByDueDate = _taskList.sort((a, b) => {\n    return a.startTimestamp - b.endTimestamp\n  });\n  sortedByDueDate.forEach(task => {\n    delete task.startTimestamp\n    delete task.endTimestamp\n  })\n  return order ? _taskList.reverse() : _taskList;\n}\n\nexport const sortTasksByPriority = (_taskList, order) => {\n  const sortedByPriority = _taskList.sort((a, b) => {\n    return a.priority - b.priority\n  });\n  return order ? sortedByPriority.reverse() : sortedByPriority;\n}\n\nexport const sortTasksByUser = (_taskList, order) => {\n  const sortedByPriority = _taskList.sort((a, b) => {\n    return a.assignee.id - b.assignee.id\n  });\n  return order ? sortedByPriority.reverse() : sortedByPriority;\n}","import React from 'react';\nimport { getDateFormatted } from '../../utilities/utility';\n\nconst priorities = [\"low\", \"med\", \"high\"];\n\nconst TaskItem = ({ taskListItem, toggleTaskStatus, taskGroupData }) => (\n  <li className=\"list-group-item rotated\">\n    <div className=\"col col-6 p-0\">\n      <label className=\"cb-container\">\n        <input type=\"checkbox\" onChange={() => toggleTaskStatus(taskGroupData.id, taskListItem.id, !taskListItem.status)}\n          checked={taskListItem.status} />\n        <span className=\"checkmark\">{taskListItem.status}</span>\n      </label>\n      <span>{taskListItem.subTaskName}</span>\n    </div>\n    <div className=\"col col-6 p-0\">\n      <span>{\n        (taskListItem.endDate && taskListItem.endDate !== '') ?\n          getDateFormatted(taskListItem.startDate) + \" - \" + getDateFormatted(taskListItem.endDate) :\n          getDateFormatted(taskListItem.startDate)\n      }</span>\n      <span>\n        <span className={`badge ${taskListItem.priority === 0 ?\n          'badge-info' : (taskListItem.priority === 1) ? 'badge-warning' : 'badge-danger'}`}\n        >{priorities[taskListItem.priority]}</span>\n      </span>\n      <span>\n        <img src={taskListItem.assignee && taskListItem.assignee.profileImage !== '' ? taskListItem.assignee.profileImage :\n          require('../../assets/img/user.png')} alt=\"profile img\" className=\"img-fluid userIcon\"\n          title={taskListItem.assignee && taskListItem.assignee.name ? taskListItem.assignee.name : ''} />\n      </span>\n    </div>\n  </li>\n)\nexport default TaskItem;","export const taskListActionTypes = {\n  DUE_DATE: 'DUE_DATE',\n  PRIORITY: 'PRIORITY',\n  USER: 'USER',\n  TOGGLE_STATUS: 'TOGGLE_STATUS',\n  TOGGLE_VIEW: 'TOGGLE_VIEW',\n  DRAG_START: 'DRAG_START',\n}\nexport const sortByDueDate = (type, id, order) => ({\n  type,\n  id,\n  order\n});\nexport const toggleStatus = (type, taskId, id, flag) => ({\n  type,\n  taskId,\n  id,\n  flag\n});\nexport const toggleView = (type) => ({\n  type,\n});\nexport const setDraggingTaskId = (type, taskId, id) => ({\n  type,\n  taskId,\n  id,\n});","import React from 'react';\n\nconst Draggable = ({ className, children, handleDragStart }) => (\n  <div onDragStart={(e) => handleDragStart(e)} draggable=\"true\" className={className}>\n    {children}\n  </div>\n)\nexport default Draggable;","import React from 'react';\nimport { getDateFormatted } from '../../utilities/utility';\nimport { connect } from 'react-redux';\nimport { taskListActionTypes, setDraggingTaskId } from '../../store/actions/taskGroupActions';\nimport Draggable from '../UI/Draggable';\n\nconst TaskColumn = ({ taskListItem, handleDragStart, taskGroupData }) => (\n  <Draggable handleDragStart={() => handleDragStart(taskGroupData.id, taskListItem.id)}\n    className=\"col col-12 text-dark text-decoration-none rotated mb-3\"\n    onDragOver={(e) => e.preventDefault()}>\n    <div className=\"card\">\n      <div className=\"card-header bg-white\">\n        <div className=\"progress\">\n          <div className=\"progress-bar\" role=\"progressbar\" style={{ width: '25%' }}></div>\n        </div>\n      </div>\n      <div className=\"card-body\">\n        <h6>{taskListItem.subTaskName}</h6>\n      </div>\n      <div className=\"card-footer bg-white\">\n        <div className=\"d-flex align-items-center justify-content-between\">\n          <span>\n            <img src={taskListItem.assignee && taskListItem.assignee.profileImage !== '' ? taskListItem.assignee.profileImage :\n              require('../../assets/img/user.png')} alt=\"profile img\" className=\"img-fluid userIcon\"\n              title={taskListItem.assignee && taskListItem.assignee.name ? taskListItem.assignee.name : ''} />\n          </span>\n          <span>{\n            (taskListItem.endDate && taskListItem.endDate !== '') ?\n              getDateFormatted(taskListItem.startDate) + \" - \" + getDateFormatted(taskListItem.endDate) :\n              getDateFormatted(taskListItem.startDate)\n          }</span>\n        </div>\n      </div>\n    </div>\n  </Draggable>\n)\nconst mapDispatchToProps = dispatch => ({\n  handleDragStart: (taskGroupId, taskListItemId) => {\n    // console.log(taskGroupId, taskListItemId);\n    dispatch(setDraggingTaskId(taskListActionTypes.DRAG_START, taskGroupId, taskListItemId));\n  }\n})\nexport default connect(null, mapDispatchToProps)(TaskColumn);","import React from 'react';\n\nconst Droppable = ({ handleDrop, className, children }) => (\n  <div className={`${className} drop-area`}\n    onDrop={(e) => {\n      handleDrop(e);\n      if (e.target.classList.contains('dragover'))\n        e.target.classList.remove('dragover')\n    }}\n    onMouseLeave={(e) => {\n      if (e.target.classList.contains('dragover'))\n        e.target.classList.remove('dragover')\n    }}\n    onDragOver={(e) => {\n      e.preventDefault();\n      if (!e.target.classList.contains('dragover'))\n        e.target.classList.add('dragover')\n    }}>\n    {children}\n  </div>\n)\nexport default Droppable;","import React from 'react';\nimport TaskColumn from './TaskColumn';\nimport Droppable from '../UI/Droppable';\nimport { connect } from 'react-redux';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\n\nconst TaskGridView = ({ taskGroupData, taskGroupId, taskListItemId, dropEl }) => (\n  <div className=\"container-fluid p-3\" style={{ border: '1px solid #ddd' }}>\n    <div className=\"row\">\n      <div className=\"col col-6\">\n        <h4>In Progress</h4>\n      </div>\n      <div className=\"col col-6\">\n        <h4>Completed</h4>\n      </div>\n    </div>\n    <div className=\"row\">\n      <div className=\"col col-6\">\n        <button className=\"btn btn-outline-dark w-100\" title=\"Add new task\">\n          <FontAwesomeIcon icon={faPlus} />\n        </button>\n      </div>\n      <div className=\"col col-6\">\n        <button className=\"btn btn-outline-dark w-100\" title=\"Add new completed task\">\n          <FontAwesomeIcon icon={faPlus} />\n        </button>\n      </div>\n    </div>\n    <div className=\"row\">\n      <Droppable className=\"col col-6\" handleDrop={(e) => dropEl(taskGroupId, taskListItemId, false)}>\n        <div className=\"row\" onDragOver={(e) => e.preventDefault()}>\n          {\n            taskGroupData.taskList.filter(item => item.status === false).map((taskListItem, index) => (\n              <TaskColumn taskListItem={taskListItem} key={index} taskGroupData={taskGroupData} />\n            ))\n          }\n        </div>\n      </Droppable>\n      <Droppable className=\"col col-6\" handleDrop={(e) => dropEl(taskGroupId, taskListItemId, true)}>\n        <div className=\"row\" onDragOver={(e) => e.preventDefault()}>\n          {\n            taskGroupData.taskList.filter(item => item.status === true).map((taskListItem, index) => (\n              <TaskColumn taskListItem={taskListItem} key={index} taskGroupData={taskGroupData} />\n            ))\n          }\n        </div>\n      </Droppable>\n    </div>\n  </div>\n)\nconst mapStateToProps = (state) => ({\n  taskGroupId: state.taskGroupReducer.taskGroupId,\n  taskListItemId: state.taskGroupReducer.taskListItemId,\n})\nexport default connect(mapStateToProps, null)(TaskGridView);","import React from 'react';\nimport TaskItem from './TaskItem';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faUser, faArrowDown } from '@fortawesome/free-solid-svg-icons';\nimport { taskListActionTypes, toggleStatus } from '../../store/actions/taskGroupActions';\nimport { connect } from 'react-redux';\nimport TaskGridView from './TaskGridView';\n\nconst TaskList = ({ taskGroupData, sortBy, currentFilter, order, view, toggleTaskStatus, taskGroupId }) => (\n  <ul className=\"list-group\">\n    <li className=\"list-group-item list-header\">\n      <div className=\"col col-6 p-0\">\n        <button className=\"btn btn-primary\">Add Task</button>\n      </div>\n      <div className=\"col col-6 p-0\">\n        <button className={`btn btn-link text-light${currentFilter === taskListActionTypes.DUE_DATE ? ' active' : ''}`}\n          onClick={() => sortBy(taskListActionTypes.DUE_DATE)}>Due\n          {\n            currentFilter === taskListActionTypes.DUE_DATE ? (\n              <span style={{ transform: `rotate(${order ? 180 : 0}deg)` }} className=\"icon\">\n                <FontAwesomeIcon icon={faArrowDown} />\n              </span>\n            ) : ''\n          }\n        </button>\n        <button className={`btn btn-link text-light${currentFilter === taskListActionTypes.PRIORITY ? ' active' : ''}`}\n          onClick={() => sortBy(taskListActionTypes.PRIORITY)}>Priority\n          {\n            currentFilter === taskListActionTypes.PRIORITY ? (\n              <span style={{ transform: `rotate(${order ? 180 : 0}deg)` }} className=\"icon\">\n                <FontAwesomeIcon icon={faArrowDown} />\n              </span>\n            ) : ''\n          }\n        </button>\n        <button className={`btn btn-link text-light${currentFilter === taskListActionTypes.USER ? ' active' : ''}`}\n          onClick={() => sortBy(taskListActionTypes.USER)}>\n          <FontAwesomeIcon icon={faUser} />\n          {\n            currentFilter === taskListActionTypes.USER ? (\n              <span style={{ transform: `rotate(${order ? 180 : 0}deg)` }} className=\"icon\">\n                <FontAwesomeIcon icon={faArrowDown} />\n              </span>\n            ) : ''\n          }\n        </button>\n      </div>\n    </li>\n    {\n      view ?\n        taskGroupData[taskGroupId].taskList.map((taskListItem, index) => (\n          <TaskItem taskListItem={taskListItem} key={index} taskGroupData={taskGroupData[taskGroupId]}\n            toggleTaskStatus={toggleTaskStatus} />\n        )) : (\n          <TaskGridView taskGroupData={taskGroupData[taskGroupId]} dropEl={toggleTaskStatus} />\n        )\n    }\n  </ul>\n);\nconst mapStateToProps = (state) => ({\n  view: state.taskGroupReducer.view,\n  taskGroupData: state.taskGroupReducer.taskGroupData,\n});\nconst mapDispatchToProps = (dispatch) => ({\n  toggleTaskStatus: (taskGroupId, taskListItemId, status) => {\n    // console.log(taskGroupId, taskListItemId, status);\n    dispatch(toggleStatus(taskListActionTypes.TOGGLE_STATUS, taskGroupId, taskListItemId, status));\n  }\n})\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskList);","import React from 'react';\nimport TaskList from './TaskList';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { sortByDueDate, toggleView, taskListActionTypes } from '../../store/actions/taskGroupActions';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faList, faColumns } from '@fortawesome/free-solid-svg-icons';\n\nconst TaskGroup = ({ taskGroupData, match, sortBy, currentFilter, order, view, toggleView }) => (\n  taskGroupData ?\n    <div className=\"container task-group\">\n      <div className=\"row\">\n        <div className=\"col col-12\">\n          <h1 className=\"d-flex align-items-center justify-content-between\">\n            <span>{taskGroupData[match.params.id].taskName}</span>\n            <button className=\"btn btn-outline-dark\" onClick={toggleView} title=\"Toggle grid/list view\">\n              {\n                view ? <FontAwesomeIcon icon={faList} /> : <FontAwesomeIcon icon={faColumns} />\n              }\n            </button>\n          </h1>\n          <TaskList\n            taskGroupId={match.params.id}\n            currentFilter={currentFilter}\n            order={order}\n            sortBy={(filter) => sortBy(filter, match.params.id, filter === currentFilter)} />\n        </div>\n      </div>\n    </div> : null\n)\nconst mapStateToProps = (state) => ({\n  taskGroupData: state.taskGroupReducer.taskGroupData,\n  currentFilter: state.taskGroupReducer.currentFilter,\n  order: state.taskGroupReducer.order,\n  view: state.taskGroupReducer.view,\n});\nconst mapDispatchToProps = (dispatch) => ({\n  sortBy: (filter, taskId, order) => {\n    dispatch(sortByDueDate(filter, taskId, order));\n  },\n  toggleView: () => {\n    dispatch(toggleView(taskListActionTypes.TOGGLE_VIEW));\n  }\n})\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(TaskGroup));","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faBars } from '@fortawesome/free-solid-svg-icons';\n\nconst Navbar = () => {\n  return (\n    <nav className=\"navbar navbar-light bg-light\">\n      <div className=\"collapse navbar-collapse show\" id=\"navbarSupportedContent\">\n        <ul className=\"navbar-nav my-navbar-nav\">\n          <li className=\"nav-item\">\n            <button className=\"nav-link btn btn-link\">\n              <FontAwesomeIcon icon={faBars} />\n            </button>\n          </li>\n          <li className=\"nav-item\">\n            <NavLink to=\"/\" className=\"nav-link\">Home</NavLink>\n          </li>\n          <li className=\"nav-item\">\n            <NavLink to=\"/my-tasks\" className=\"nav-link\">My Tasks</NavLink>\n          </li>\n        </ul>\n      </div>\n    </nav>\n  )\n}\nexport default Navbar;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { getDateFormatted } from '../../utilities/utility';\n\nconst TaskGroupList = ({ taskGroupList }) => {\n  return (\n    taskGroupList && taskGroupList.length > 0 ? (\n      <div className=\"container mt-3\">\n        <h1 className=\"mb-3\">Task Boards</h1>\n        <div className=\"row\">\n          {\n            taskGroupList.map((item, index) => (\n              <Link className=\"col col-4 text-dark text-decoration-none\" to={`/tasks/${item.id}`} key={index}>\n                <div className=\"card\">\n                  <div className=\"card-header bg-white\">\n                    <div className=\"progress\">\n                      <div className=\"progress-bar\" role=\"progressbar\" style={{ width: '25%' }}></div>\n                    </div>\n                  </div>\n                  <div className=\"card-body\">\n                    <h6>{item.taskName}</h6>\n                  </div>\n                  <div className=\"card-footer bg-white\">\n                    <div className=\"d-flex align-items-center justify-content-between\">\n                      <span>\n                        <img src={item.creator && item.creator.profileImage !== '' ? item.creator.profileImage :\n                          require('../../assets/img/user.png')} alt=\"profile img\" className=\"img-fluid userIcon\"\n                          title={item.creator && item.creator.name ? item.creator.name : ''} />\n                      </span>\n                      <span>{\n                        (item.endDate && item.endDate !== '') ?\n                          getDateFormatted(item.startDate) + \" - \" + getDateFormatted(item.endDate) :\n                          getDateFormatted(item.startDate)\n                      }</span>\n                    </div>\n                  </div>\n                </div>\n              </Link>\n            ))\n          }\n        </div>\n      </div>\n    ) : null\n  )\n}\nconst mapStateToProps = (state) => ({\n  taskGroupList: state.taskGroupReducer.taskGroupData\n})\nexport default connect(mapStateToProps, null)(TaskGroupList);","import React from 'react';\n\nconst User = () => (\n  <div className=\"container m-3\">\n    <div className=\"row\">\n      <div className=\"col col-12\">Coming soon.</div>\n    </div>\n  </div>\n)\nexport default User;","import React from 'react';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nimport './assets/scss/App.scss';\nimport TaskGroup from './components/Task/TaskGroup';\nimport Navbar from './components/Navbar/Navbar';\nimport TaskGroupList from './components/Task/TaskGroupList';\nimport User from './components/User/User';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <HashRouter>\n          <Navbar />\n          <Switch>\n            <Route exact path=\"/\" component={TaskGroupList} />\n            <Route path=\"/tasks/:id\" component={TaskGroup} />\n            <Route path=\"/my-tasks\" component={User} />\n          </Switch>\n        </HashRouter>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { taskListActionTypes } from \"../actions/taskGroupActions\";\nimport { sortTasksByDate, sortTasksByPriority, sortTasksByUser } from \"../../utilities/utility\";\nimport { taskGroupData } from \"../../assets/json/task\";\n\nconst sortTaskListing = (taskGroupState, currentTaskId, sortingFunc, order) => {\n  const _taskGroup = { ...taskGroupState[currentTaskId] };\n  const _taskList = _taskGroup.taskList;\n  const s = sortingFunc(_taskList, order);\n  const n = [...taskGroupState];\n  n.forEach(task => {\n    if (task.id === currentTaskId) {\n      task = s\n    }\n  })\n  return n;\n}\n\nconst _taskGroupState = {\n  taskGroupData,\n  currentFilter: '',\n  order: false,\n  view: false,\n  taskGroupId: -1,\n  taskListItemId: -1,\n}\n\nconst taskGroupReducer = (taskGroupState = _taskGroupState, action) => {\n  let sorted = {};\n  // console.log(action);\n  switch (action.type) {\n    case taskListActionTypes.DUE_DATE:\n      sorted = sortTaskListing(taskGroupState.taskGroupData, action.id, sortTasksByDate, action.order);\n      return { ...taskGroupState, taskGroupData: sorted, currentFilter: action.type, order: action.order };\n    case taskListActionTypes.PRIORITY:\n      sorted = sortTaskListing(taskGroupState.taskGroupData, action.id, sortTasksByPriority, action.order);\n      return { ...taskGroupState, taskGroupData: sorted, currentFilter: action.type, order: action.order };\n    case taskListActionTypes.USER:\n      sorted = sortTaskListing(taskGroupState.taskGroupData, action.id, sortTasksByUser, action.order);\n      return { ...taskGroupState, taskGroupData: sorted, currentFilter: action.type, order: action.order };\n    case taskListActionTypes.TOGGLE_STATUS:\n      const t = [...taskGroupState.taskGroupData];\n      const currentTaskGroup = t.filter(item => item.id === parseInt(action.taskId));\n      const taskList = [...currentTaskGroup[0].taskList];\n      // console.log(action, currentTaskGroup, taskList);\n      taskList.forEach(item => {\n        if (item.id === action.id) {\n          item.status = action.flag;\n        }\n      });\n      currentTaskGroup.taskList = taskList;\n      t.forEach(item => {\n        if (item.id === action.taskId) {\n          item = currentTaskGroup;\n        }\n      });\n      return { ...taskGroupState, taskGroupData: t, taskGroupId: -1, taskListItemId: -1 };\n    case taskListActionTypes.TOGGLE_VIEW:\n      return { ...taskGroupState, view: !taskGroupState.view };\n    case taskListActionTypes.DRAG_START:\n      // console.log(action.taskId, action.id);\n      return { ...taskGroupState, taskGroupId: action.taskId, taskListItemId: action.id };\n    default:\n      return { ...taskGroupState };\n  }\n}\n\nexport default taskGroupReducer;","\nexport const taskGroupData = [\n  {\n    id: 0,\n    taskName: 'Marketing Compaign',\n    startDate: '6/5/2019',\n    endDate: '6/26/2019',\n    creator: {\n      name: 'Max',\n      id: 11,\n      profileImage: ''\n    },\n    taskList: [\n      {\n        id: 0,\n        subTaskName: 'Compaign Messaging',\n        status: false,\n        startDate: '6/14/2019',\n        endDate: '6/20/2019',\n        priority: 1,\n        assignee: {\n          name: 'John Doe',\n          id: 123,\n          profileImage: ''\n        }\n      },\n      {\n        id: 1,\n        subTaskName: 'Media Plan',\n        status: false,\n        startDate: '6/25/2019',\n        endDate: '6/26/2019',\n        priority: 2,\n        assignee: {\n          name: 'Prem Chand',\n          id: 125,\n          profileImage: ''\n        }\n      },\n      {\n        id: 2,\n        subTaskName: 'Select Agency',\n        status: false,\n        startDate: '6/5/2019',\n        endDate: '6/6/2019',\n        priority: 1,\n        assignee: {\n          name: 'Prem Chand',\n          id: 125,\n          profileImage: ''\n        }\n      }\n    ]\n  }\n]","import { combineReducers } from 'redux';\nimport taskGroupReducer from './taskGroupReducer';\n\nexport const rootReducer = combineReducers({\n  taskGroupReducer,\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/scss/index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { createStore } from 'redux';\nimport { rootReducer } from './store/reducers';\nimport { Provider } from 'react-redux';\n\nconst store = createStore(rootReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nReactDOM.render(<Provider store={store}>\n  <App />\n</Provider>, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}