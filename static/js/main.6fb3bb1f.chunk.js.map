{"version":3,"sources":["assets/img/user.png","utilities/utility.js","components/Task/TaskItem.js","components/UI/Draggable.js","utilities/service.js","store/actions/taskDetailActions.js","store/actions/taskListActions.js","components/Task/TaskColumn.js","components/UI/Droppable.js","components/Task/TaskGridView.js","components/Task/TaskList.js","store/actions/taskGroupActions.js","components/Task/TaskGroup.js","components/Navbar/Navbar.js","components/Task/TaskGroupList.js","components/User/User.js","components/Task/CreateNewBoard.js","store/actions/userAction.js","components/PrivateRoute.js","components/User/Auth.js","components/404.js","components/Task/TaskDetails.js","components/Task/TaskForm.js","components/Task/EditTask.js","App.js","serviceWorker.js","store/reducers/taskGroupReducer.js","assets/json/task.js","store/reducers/taskListReducer.js","store/reducers/userReducer.js","store/reducers/taskDetailsReducer.js","store/reducers/index.js","index.js"],"names":["module","exports","months","getDateFormatted","dataString","date","Date","month","getMonth","day","getDate","priorities","TaskItem","taskListItem","toggleTaskStatus","className","type","onChange","_id","status","taskBoardId","checked","to","subTaskName","endDate","startDate","priority","src","assignee","profileImage","require","alt","title","assigneeName","Draggable","children","handleDragStart","onDragStart","e","draggable","baseUrl","authenticate","a","id","fetch","res","json","resData","data","fetchTaskGroupData","fetchTaskGroupDetails","fetchTaskListData","fetchTaskDetailsData","fetchAttachedPictureData","fetchAllUsers","removeAttachedPictureData","method","uploadAttachedPictureData","file","formData","FormData","append","body","toggleTaskStatusFunc","flag","JSON","stringify","headers","updateTaskDataFunc","reqData","createNewTask","console","log","fetchTaskDetailsActions","fetchTaskMediaActions","fetchTaskDetailsBegins","fetchTasDetailsSuccess","payload","fetchTaskDetailsError","fetchAttachedPicture","dispatch","taskListActionTypes","fetchTaskListActions","fetchTaskListBegins","fetchTaskListError","fetchTaskList","page","connect","task","onDragOver","preventDefault","role","style","width","Droppable","handleDrop","onDrop","target","classList","contains","remove","onMouseLeave","add","state","draggingTask","taskListReducer","taskListData","dropEl","border","filter","item","map","index","key","taskGroupData","view","sortBy","currentFilter","order","length","onClick","transform","icon","faArrowDown","faUser","fetchTaskGroupActions","fetchTaskGroupError","TaskGroup","this","props","fetchTaskGroupDetailsBy","match","params","getTaskListByTaskGroupId","toggleViewFunc","taskName","minWidth","faList","faColumns","taskDesc","taskGroupId","React","Component","withRouter","taskGroupReducer","taskId","sortTaskListBy","location","test","path","faBars","exact","TaskGroupList","taskGroupListFunc","taskGroupList","faPlus","creator","name","User","CreateNewBoard","creatorId","userReducer","setState","value","history","maxWidth","onSubmit","handleSubmit","go","faArrowLeft","placeholder","handleInputChange","required","userActionTypes","fetchAllUsersActionError","saveUserData","loginStatus","userData","saveUserDataFunc","component","rest","render","promiseFn","localStorage","getItem","err","isLoading","msg","pathname","from","Auth","email","password","checkingLoginStatus","emailStr","proceedToLogin","handleChange","page404","TaskDetails","editingInput","uploadMedia","inputMediaUrl","inputMediaName","error","editTaskFlag","getTaskDetails","getAttachedPictures","files","maxFileSize","size","reader","FileReader","onload","ev","result","readAsDataURL","uploadMediaForTaskFunc","taskDetailsReducer","removeMediaForTaskFunc","setEditingTaskFunc","taskDetails","taskMedia","uploadMediaStatus","faPencilAlt","subTaskDesc","backgroundImage","filename","reporter","reporterName","createdOn","toLocaleDateString","toLocaleTimeString","updatedOn","upload","accept","handleFileChange","htmlFor","fetchTaskDetails","uploadMediaForTask","removeMediaForTask","taskData","_history","setEditingTask","push","allUsers","handleUserChange","assigneeId","disabled","user","EditTask","editingTask","action","assId","indexOf","substring","getAllUsersFunc","extractData","updateTaskDetailsFunc","taskUpdateRes","timr","setTimeout","clearTimeout","getRespMsg","usersRes","updateTaskDetails","App","Boolean","window","hostname","_taskGroupState","taskList","taskListItemId","taskGroupState","_taskListState","taskListState","sorted","sort","prev","curr","getTime","td","reverse","setItem","initialState","hasOwnProperty","_taskDetailState","taskDetailState","rootReducer","combineReducers","store","createStore","compose","applyMiddleware","thunk","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6fb3bb1f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/user.64ac9ec3.png\";","const months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n\nexport const getDateFormatted = (dataString) => {\n  let date = new Date(dataString);\n  let month = months[date.getMonth()];\n  let day = date.getDate();\n  // let year = date.getFullYear();\n  return `${month} ${day}`;\n}\n\nexport const sortTasksByDate = (_taskList, order) => {\n  _taskList.forEach(task => {\n    task.startTimestamp = new Date(task.startDate).getTime();\n    task.endTimestamp = new Date(task.endDate).getTime();\n  });\n  const sortedByDueDate = _taskList.sort((a, b) => {\n    return a.startTimestamp - b.endTimestamp\n  });\n  sortedByDueDate.forEach(task => {\n    delete task.startTimestamp\n    delete task.endTimestamp\n  })\n  return order ? _taskList.reverse() : _taskList;\n}\n\nexport const sortTasksByPriority = (_taskList, order) => {\n  const sortedByPriority = _taskList.sort((a, b) => {\n    return a.priority - b.priority\n  });\n  return order ? sortedByPriority.reverse() : sortedByPriority;\n}\n\nexport const sortTasksByUser = (_taskList, order) => {\n  const sortedByPriority = _taskList.sort((a, b) => {\n    return a.assignee.id - b.assignee.id\n  });\n  return order ? sortedByPriority.reverse() : sortedByPriority;\n}\n\nexport const isEmail = (emailStr) => {\n  return /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/.test(emailStr);\n}\n\nexport const priorities = [\"low\", \"med\", \"high\"];","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { getDateFormatted, priorities } from '../../utilities/utility';\n\nconst TaskItem = ({ taskListItem, toggleTaskStatus }) => (\n  <li className=\"list-group-item rotated\">\n    <div className=\"col col-6 p-0\">\n      <label className=\"cb-container\">\n        <input type=\"checkbox\" onChange={() => toggleTaskStatus(taskListItem._id, !taskListItem.status, taskListItem.taskBoardId)}\n          checked={taskListItem.status} />\n        <span className=\"checkmark\">{taskListItem.status}</span>\n      </label>\n      <Link to={`/task-details/${taskListItem._id}`} className=\"text-dark\">{taskListItem.subTaskName}</Link>\n    </div>\n    <div className=\"col col-6 p-0\">\n      <span>{\n        (taskListItem.endDate && taskListItem.endDate !== '') ?\n          getDateFormatted(taskListItem.startDate) + \" - \" + getDateFormatted(taskListItem.endDate) :\n          getDateFormatted(taskListItem.startDate)\n      }</span>\n      <span>\n        <span className={`badge ${taskListItem.priority === 0 ?\n          'badge-info' : (taskListItem.priority === 1) ? 'badge-warning' : 'badge-danger'}`}\n        >{priorities[taskListItem.priority]}</span>\n      </span>\n      <span>\n        <img src={taskListItem.assignee && taskListItem.assignee.profileImage !== '' ? taskListItem.assignee.profileImage :\n          require('../../assets/img/user.png')} alt=\"profile img\" className=\"img-fluid userIcon\"\n          title={taskListItem.assignee && taskListItem.assignee.assigneeName ? taskListItem.assignee.assigneeName : ''} />\n      </span>\n    </div>\n  </li>\n)\nexport default TaskItem;","import React from 'react';\n\nconst Draggable = ({ className, children, handleDragStart }) => (\n  <div onDragStart={(e) => handleDragStart(e)} draggable=\"true\" className={className}>\n    {children}\n  </div>\n)\nexport default Draggable;","export const baseUrl = process.env.NODE_ENV !== 'production' ? 'http://localhost:4000' : 'https://node-taskman.herokuapp.com';\n\nexport const authenticate = async ({ id }) => {\n  if (id == null) {\n    return null;\n  }\n  const res = await fetch(`${baseUrl}/users/${id}`);\n  const resData = await res.json();\n  if (resData && resData.status === 1) {\n    return resData.data;\n  }\n  return null;\n}\n\nexport const fetchTaskGroupData = async () => {\n  const res = await fetch(`${baseUrl}/task-boards`);\n  const data = await res.json();\n  return data;\n}\n\nexport const fetchTaskGroupDetails = async (id) => {\n  const res = await fetch(`${baseUrl}/get-task-board-by-id/${id}`);\n  const data = await res.json();\n  return data;\n}\n\nexport const fetchTaskListData = async (id) => {\n  const res = await fetch(`${baseUrl}/task-list-by-taskboard-id/${id}`);\n  const data = await res.json();\n  return data;\n}\n\nexport const fetchTaskDetailsData = async (id) => {\n  const res = await fetch(`${baseUrl}/task-details/${id}`);\n  const data = await res.json();\n  return data;\n}\n\nexport const fetchAttachedPictureData = async (id) => {\n  const res = await fetch(`${baseUrl}/task-medias/${id}`);\n  const data = await res.json();\n  return data;\n}\n\nexport const fetchAllUsers = async () => {\n  const res = await fetch(`${baseUrl}/users`);\n  const data = await res.json();\n  return data;\n}\n\nexport const removeAttachedPictureData = async (id) => {\n  const res = await fetch(`${baseUrl}/delete-media/${id}`, {\n    method: 'DELETE'\n  });\n  const data = await res.json();\n  return data;\n}\n\nexport const uploadAttachedPictureData = async (id, file) => {\n  const formData = new FormData();\n  formData.append('media', file);\n  formData.append('_id', id);\n  const res = await fetch(`${baseUrl}/upload-media`, {\n    body: formData,\n    method: 'POST'\n  });\n  const data = await res.json();\n  return data;\n}\n\nexport const toggleTaskStatusFunc = async (_id, flag) => {\n  const res = await fetch(`${baseUrl}/update-task`, {\n    body: JSON.stringify({\n      _id,\n      status: flag,\n    }),\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  const data = await res.json();\n  return data;\n}\n\nexport const updateTaskDataFunc = async (reqData) => {\n  const res = await fetch(`${baseUrl}/update-task`, {\n    body: JSON.stringify(reqData),\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  const data = await res.json();\n  return data;\n}\n\nexport const createNewTask = async (reqData) => {\n  console.log(reqData);\n  const res = await fetch(`${baseUrl}/create-new-task`, {\n    body: JSON.stringify(reqData),\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  const data = await res.json();\n  return data;\n}","import { fetchTaskDetailsData, fetchAttachedPictureData, uploadAttachedPictureData, removeAttachedPictureData, updateTaskDataFunc, createNewTask } from \"../../utilities/service\"\n\nexport const fetchTaskDetailsActions = {\n  SUCCESS: 'TD_SUCCESS',\n  ERROR: 'TD_ERROR',\n  START: 'TD_START',\n  EDITING_TASK: 'EDITING_TASK',\n  TASK_UPDATED: 'TASK_UPDATED',\n}\nexport const fetchTaskMediaActions = {\n  SUCCESS: 'TM_SUCCESS',\n  UPLOAD: 'TM_UPLOAD',\n}\nexport const startUploadingMedia = (uploadMediaStatus) => ({\n  type: fetchTaskMediaActions.UPLOAD,\n  uploadMediaStatus\n})\nexport const setEditingTask = (taskData) => ({\n  type: fetchTaskDetailsActions.EDITING_TASK,\n  taskData,\n});\nexport const taskDetailsUpdated = (payload) => ({\n  type: fetchTaskDetailsActions.TASK_UPDATED,\n  payload,\n});\nexport const fetchTaskDetailsBegins = () => ({\n  type: fetchTaskDetailsActions.START\n})\n\nexport const fetchTasDetailsSuccess = (payload) => ({\n  type: fetchTaskDetailsActions.SUCCESS,\n  payload\n})\n\nexport const fetchTaskMediaSuccess = (payload) => ({\n  type: fetchTaskMediaActions.SUCCESS,\n  payload\n})\n\nexport const fetchTaskDetailsError = (payload) => ({\n  type: fetchTaskDetailsActions.ERROR,\n  payload\n})\n\nexport const fetchTaskDetails = (id) => {\n  return async dispatch => {\n    dispatch(fetchTaskDetailsBegins());\n    try {\n      const resData = await fetchTaskDetailsData(id);\n      resData.status === 1 ?\n        dispatch(fetchTasDetailsSuccess(resData.data)) :\n        dispatch(fetchTaskDetailsError(resData))\n    }\n    catch (err) {\n      dispatch(fetchTaskDetailsError(err))\n    }\n  }\n}\n\nexport const updateTaskDetails = (data, action) => {\n  return async dispatch => {\n    dispatch(fetchTaskDetailsBegins());\n    try {\n      let resData = null;\n      if (action === '1')\n        resData = await updateTaskDataFunc(data);\n      else\n        resData = await createNewTask(data);\n      if (resData.status === 1) {\n        dispatch(taskDetailsUpdated(resData));\n      }\n      else {\n        dispatch(fetchTaskDetailsError(resData));\n      }\n    }\n    catch (err) {\n      dispatch(fetchTaskDetailsError(err))\n    }\n  }\n}\nexport const fetchAttachedPicture = (id) => {\n  return async dispatch => {\n    dispatch(fetchTaskDetailsBegins());\n    try {\n      const resData = await fetchAttachedPictureData(id);\n      resData.status === 1 ?\n        dispatch(fetchTaskMediaSuccess(resData.data)) :\n        dispatch(fetchTaskDetailsError(resData))\n    }\n    catch (err) {\n      dispatch(fetchTaskDetailsError(err))\n    }\n  }\n}\nexport const uploadMediaForTask = (id, file) => {\n  return async dispatch => {\n    dispatch(fetchTaskDetailsBegins());\n    try {\n      const resData = await uploadAttachedPictureData(id, file);\n      if (resData.status === 1) {\n        dispatch(fetchAttachedPicture(id));\n      }\n      else {\n        dispatch(fetchTaskDetailsError(resData))\n      }\n    }\n    catch (err) {\n      dispatch(fetchTaskDetailsError(err))\n    }\n  }\n}\nexport const removeMediaForTask = (taskId, id) => {\n  return async dispatch => {\n    dispatch(fetchTaskDetailsBegins());\n    try {\n      const resData = await removeAttachedPictureData(id);\n      if (resData.status === 1) {\n        dispatch(fetchAttachedPicture(taskId));\n      }\n      else {\n        dispatch(fetchTaskDetailsError(resData))\n      }\n    }\n    catch (err) {\n      dispatch(fetchTaskDetailsError(err))\n    }\n  }\n}","import { fetchTaskListData, toggleTaskStatusFunc } from \"../../utilities/service\";\nimport { fetchTasDetailsSuccess } from \"./taskDetailActions\";\n\nexport const taskListActionTypes = {\n  DUE_DATE: 'DUE_DATE',\n  PRIORITY: 'PRIORITY',\n  USER: 'USER',\n  TOGGLE_STATUS: 'TOGGLE_STATUS',\n  TOGGLE_VIEW: 'TOGGLE_VIEW',\n  DRAG_START: 'DRAG_START',\n}\nexport const sortTaskListBy = (type, id, order) => ({\n  type,\n  id,\n  order\n});\nexport const toggleStatus = (taskId, id, flag) => ({\n  type: taskListActionTypes.TOGGLE_STATUS,\n  taskId,\n  id,\n  flag\n});\nexport const toggleView = () => ({\n  type: taskListActionTypes.TOGGLE_VIEW,\n});\nexport const setDraggingTaskId = (task) => ({\n  type: taskListActionTypes.DRAG_START,\n  task,\n});\n\nexport const fetchTaskListActions = {\n  START: 'TL_START',\n  SUCCESS: 'TL_SUCCESS',\n  ERROR: 'TL_ERROR',\n}\nexport const fetchTaskListBegins = () => ({\n  type: fetchTaskListActions.START\n})\n\nexport const fetchTaskListSuccess = (payload) => ({\n  type: fetchTaskListActions.SUCCESS,\n  payload\n})\n\nexport const fetchTaskListError = (payload) => ({\n  type: fetchTaskListActions.ERROR,\n  payload\n})\n\nexport const fetchTaskList = (id) => {\n  return async dispatch => {\n    dispatch(fetchTaskListBegins());\n    try {\n      const resData = await fetchTaskListData(id);\n      resData.status === 1 ?\n        dispatch(fetchTaskListSuccess(resData.data)) :\n        dispatch(fetchTaskListError(resData))\n    }\n    catch (err) {\n      dispatch(fetchTaskListError(err))\n    }\n  }\n}\n\nexport const toggleTaskStatus = (id, flag, page, taskBoardId) => {\n  return async dispatch => {\n    dispatch(fetchTaskListBegins());\n    try {\n      const resData = await toggleTaskStatusFunc(id, flag);\n      await resData.status === 1 ?\n        page === 'list' ? dispatch(fetchTaskList(taskBoardId)) : dispatch(fetchTasDetailsSuccess(resData.data)) :\n        dispatch(fetchTaskListError(resData))\n    }\n    catch (err) {\n      dispatch(fetchTaskListError(err))\n    }\n  }\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { getDateFormatted } from '../../utilities/utility';\nimport { connect } from 'react-redux';\nimport Draggable from '../UI/Draggable';\nimport { setDraggingTaskId } from '../../store/actions/taskListActions';\n\nconst TaskColumn = ({ taskListItem, handleDragStart }) => (\n  <Draggable handleDragStart={() => handleDragStart(taskListItem._id, taskListItem.status, taskListItem.taskBoardId)}\n    className=\"col col-12 text-dark text-decoration-none rotated mb-3\"\n    onDragOver={(e) => e.preventDefault()}>\n    <Link to={`/task-details/${taskListItem._id}`} className=\"text-dark text-decoration-none\">\n      <div className=\"card\">\n        <div className=\"card-header bg-white\">\n          <div className=\"progress\">\n            <div className=\"progress-bar\" role=\"progressbar\" style={{ width: '25%' }}></div>\n          </div>\n        </div>\n        <div className=\"card-body\">\n          <h6>{taskListItem.subTaskName}</h6>\n        </div>\n        <div className=\"card-footer bg-white\">\n          <div className=\"d-flex align-items-center justify-content-between\">\n            <span>\n              <img src={taskListItem.assignee && taskListItem.assignee.profileImage !== '' ? taskListItem.assignee.profileImage :\n                require('../../assets/img/user.png')} alt=\"profile img\" className=\"img-fluid userIcon\"\n                title={taskListItem.assignee && taskListItem.assignee.assigneeName ? taskListItem.assignee.assigneeName : ''} />\n            </span>\n            <span>{\n              (taskListItem.endDate && taskListItem.endDate !== '') ?\n                getDateFormatted(taskListItem.startDate) + \" - \" + getDateFormatted(taskListItem.endDate) :\n                getDateFormatted(taskListItem.startDate)\n            }</span>\n          </div>\n        </div>\n      </div>\n    </Link>\n  </Draggable>\n)\nconst mapDispatchToProps = dispatch => ({\n  handleDragStart: (id, status, taskBoardId) => {\n    console.log(id, status, taskBoardId);\n    dispatch(setDraggingTaskId({ id, status, taskBoardId }));\n  }\n})\nexport default connect(null, mapDispatchToProps)(TaskColumn);","import React from 'react';\n\nconst Droppable = ({ handleDrop, className, children }) => (\n  <div className={`${className} drop-area`}\n    onDrop={(e) => {\n      handleDrop(e);\n      if (e.target.classList.contains('dragover'))\n        e.target.classList.remove('dragover')\n    }}\n    onMouseLeave={(e) => {\n      if (e.target.classList.contains('dragover'))\n        e.target.classList.remove('dragover')\n    }}\n    onDragOver={(e) => {\n      e.preventDefault();\n      if (!e.target.classList.contains('dragover'))\n        e.target.classList.add('dragover')\n    }}>\n    {children}\n  </div>\n)\nexport default Droppable;","import React from 'react';\nimport TaskColumn from './TaskColumn';\nimport Droppable from '../UI/Droppable';\nimport { connect } from 'react-redux';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\n\nconst TaskGridView = ({ taskListData, draggingTask, dropEl }) => (\n  <div className=\"container-fluid p-3\" style={{ border: '1px solid #ddd' }}>\n    <div className=\"row\">\n      <div className=\"col col-6\">\n        <h4>In Progress</h4>\n      </div>\n      <div className=\"col col-6\">\n        <h4>Completed</h4>\n      </div>\n    </div>\n    <div className=\"row\">\n      <Droppable className=\"col col-6\" handleDrop={() => dropEl(draggingTask.id, !draggingTask.status, draggingTask.taskBoardId)}>\n        <div className=\"row\" onDragOver={(e) => e.preventDefault()}>\n          {\n            taskListData.filter(item => item.status === false).map((taskListItem, index) => (\n              <TaskColumn taskListItem={taskListItem} key={index} taskGroupData={taskListData} />\n            ))\n          }\n        </div>\n      </Droppable>\n      <Droppable className=\"col col-6\" handleDrop={() => dropEl(draggingTask.id, !draggingTask.status, draggingTask.taskBoardId)}>\n        <div className=\"row\" onDragOver={(e) => e.preventDefault()}>\n          {\n            taskListData.filter(item => item.status === true).map((taskListItem, index) => (\n              <TaskColumn taskListItem={taskListItem} key={index} taskGroupData={taskListData} />\n            ))\n          }\n        </div>\n      </Droppable>\n    </div>\n  </div>\n)\nconst mapStateToProps = (state) => ({\n  // taskGroupId: state.taskGroupReducer.taskGroupId,\n  draggingTask: state.taskListReducer.draggingTask,\n})\nexport default connect(mapStateToProps, null)(TaskGridView);","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport TaskItem from './TaskItem';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faUser, faArrowDown } from '@fortawesome/free-solid-svg-icons';\nimport { connect } from 'react-redux';\nimport TaskGridView from './TaskGridView';\nimport { taskListActionTypes, toggleTaskStatus } from '../../store/actions/taskListActions';\n\nconst TaskList = ({ taskListData, sortBy, currentFilter, order, view, toggleTaskStatus }) => (\n  <ul className=\"list-group\">\n    <li className=\"list-group-item list-header\">\n      {\n        taskListData && taskListData.length ? (\n          <div className=\"col col-6 p-0\">\n            <Link to={`/add-task/0/${taskListData[0].taskBoardId}`} className=\"btn btn-primary\">Add Task</Link>\n          </div>\n        ) : ''\n      }\n      {\n        view ? (\n          <div className=\"col col-6 p-0\">\n            <button className={`btn btn-link text-light${currentFilter === taskListActionTypes.DUE_DATE ? ' active' : ''}`}\n              onClick={() => sortBy(taskListActionTypes.DUE_DATE)}>Due\n                  {\n                currentFilter === taskListActionTypes.DUE_DATE ? (\n                  <span style={{ transform: `rotate(${order ? 180 : 0}deg)` }} className=\"icon\">\n                    <FontAwesomeIcon icon={faArrowDown} />\n                  </span>\n                ) : ''\n              }\n            </button>\n            <button className={`btn btn-link text-light${currentFilter === taskListActionTypes.PRIORITY ? ' active' : ''}`}\n              onClick={() => sortBy(taskListActionTypes.PRIORITY)}>Priority\n                  {\n                currentFilter === taskListActionTypes.PRIORITY ? (\n                  <span style={{ transform: `rotate(${order ? 180 : 0}deg)` }} className=\"icon\">\n                    <FontAwesomeIcon icon={faArrowDown} />\n                  </span>\n                ) : ''\n              }\n            </button>\n            <button className={`btn btn-link text-light${currentFilter === taskListActionTypes.USER ? ' active' : ''}`}\n              onClick={() => sortBy(taskListActionTypes.USER)}>\n              <FontAwesomeIcon icon={faUser} />\n              {\n                currentFilter === taskListActionTypes.USER ? (\n                  <span style={{ transform: `rotate(${order ? 180 : 0}deg)` }} className=\"icon\">\n                    <FontAwesomeIcon icon={faArrowDown} />\n                  </span>\n                ) : ''\n              }\n            </button>\n          </div>\n        ) : ''\n      }\n\n    </li>\n    {\n      view ?\n        taskListData.map((taskListItem, index) => (\n          <TaskItem taskListItem={taskListItem} key={index} taskListData={taskListData}\n            toggleTaskStatus={toggleTaskStatus} />\n        )) : (\n          <TaskGridView taskListData={taskListData} dropEl={toggleTaskStatus} />\n        )\n    }\n  </ul>\n);\nconst mapStateToProps = (state) => ({\n  view: state.taskListReducer.view,\n});\nconst mapDispatchToProps = (dispatch) => ({\n  toggleTaskStatus: (id, status, taskBoardId) => {\n    console.log(id, status, taskBoardId);\n    dispatch(toggleTaskStatus(id, status, 'list', taskBoardId));\n  }\n})\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskList);","import { fetchTaskGroupData, fetchTaskGroupDetails } from \"../../utilities/service\";\n\nexport const fetchTaskGroupActions = {\n  START: 'TG_START',\n  SUCCESS: 'TG_SUCCESS',\n  ERROR: 'TG_ERROR',\n  DETAILS: 'TG_DETAILS',\n}\n\nexport const fetchTaskGroupBegins = () => ({\n  type: fetchTaskGroupActions.START\n})\n\nexport const fetchTaskGroupSuccess = (payload) => ({\n  type: fetchTaskGroupActions.SUCCESS,\n  payload\n})\n\nexport const fetchTaskGroupError = (payload) => ({\n  type: fetchTaskGroupActions.ERROR,\n  payload\n})\nexport const fetchTaskGroup = () => {\n  return async dispatch => {\n    dispatch(fetchTaskGroupBegins());\n    try {\n      const resData = await fetchTaskGroupData();\n      resData.status === 1 ?\n        dispatch(fetchTaskGroupSuccess(resData.data)) :\n        dispatch(fetchTaskGroupError(resData))\n    }\n    catch (err) {\n      dispatch(fetchTaskGroupError(err))\n    }\n  }\n};\n\nexport const fetchTaskGroupDetailsAction = (payload) => ({\n  type: fetchTaskGroupActions.DETAILS,\n  payload\n})\nexport const fetchTaskGroupDetailsBy = (id) => {\n  return async dispatch => {\n    const resData = await fetchTaskGroupDetails(id);\n    resData.status === 1 ?\n      dispatch(fetchTaskGroupDetailsAction(resData.data)) :\n      dispatch(fetchTaskGroupError(resData));\n  }\n}","import React from 'react';\nimport TaskList from './TaskList';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faList, faColumns } from '@fortawesome/free-solid-svg-icons';\nimport { fetchTaskGroupDetailsBy } from '../../store/actions/taskGroupActions';\nimport { fetchTaskList, toggleView, sortTaskListBy } from '../../store/actions/taskListActions';\n\nclass TaskGroup extends React.Component {\n  componentDidMount() {\n    this.props.fetchTaskGroupDetailsBy(this.props.match.params.id);\n    this.props.getTaskListByTaskGroupId(this.props.match.params.id);\n  }\n  render() {\n    const { taskGroupData, taskListData, match, sortBy, currentFilter, order, view, toggleViewFunc } = { ...this.props };\n    return taskGroupData ?\n      <div className=\"container task-group mt-3\">\n        <div className=\"row\">\n          <div className=\"col col-12\">\n            <h1 className=\"d-flex align-items-center justify-content-between\">\n              <span>{taskGroupData.taskName}</span>\n              <button className=\"btn btn-outline-dark pl-1 pr-1\" onClick={toggleViewFunc} title=\"Toggle grid/list view\" style={{ minWidth: '100px' }}>\n                {\n                  view ? <FontAwesomeIcon icon={faList} /> : <FontAwesomeIcon icon={faColumns} />\n                }\n                {\n                  (!view ? ' List' : ' Grid') + ' View'\n                }\n              </button>\n            </h1>\n            <p>{taskGroupData.taskDesc}</p>\n            <TaskList\n              taskListData={taskListData}\n              taskGroupId={match.params.id}\n              currentFilter={currentFilter}\n              order={order}\n              sortBy={(filter) => sortBy(filter, match.params.id, order)} />\n          </div>\n        </div>\n      </div> : null\n  }\n}\nconst mapStateToProps = (state) => ({\n  taskGroupData: state.taskGroupReducer.taskGroupData,\n  taskListData: state.taskListReducer.taskListData,\n  currentFilter: state.taskListReducer.currentFilter,\n  order: state.taskListReducer.order,\n  view: state.taskListReducer.view,\n});\nconst mapDispatchToProps = (dispatch) => ({\n  sortBy: (filter, taskId, order) => {\n    console.log(filter, taskId, order);\n    dispatch(sortTaskListBy(filter, taskId, order));\n  },\n  toggleViewFunc: () => {\n    dispatch(toggleView());\n  },\n  getTaskListByTaskGroupId: (id) => {\n    dispatch(fetchTaskList(id));\n  },\n  fetchTaskGroupDetailsBy: (id) => {\n    dispatch(fetchTaskGroupDetailsBy(id));\n  }\n})\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(TaskGroup));","import React from 'react';\nimport { NavLink, withRouter } from 'react-router-dom';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faBars } from '@fortawesome/free-solid-svg-icons';\n\nconst Navbar = ({ location }) => (\n  !/^\\/(login|register)$/g.test(location.path) ? (\n    <nav className=\"navbar navbar-light bg-light\">\n      <div className=\"collapse navbar-collapse show\" id=\"navbarSupportedContent\">\n        <ul className=\"navbar-nav my-navbar-nav\">\n          <li className=\"nav-item\">\n            <button className=\"nav-link btn btn-link\">\n              <FontAwesomeIcon icon={faBars} />\n            </button>\n          </li>\n          <li className=\"nav-item\">\n            <NavLink to=\"/\" className=\"nav-link\" exact>Home</NavLink>\n          </li>\n          <li className=\"nav-item\">\n            <NavLink to=\"/my-tasks\" className=\"nav-link\">My Tasks</NavLink>\n          </li>\n        </ul>\n      </div>\n    </nav>) : null\n)\nexport default withRouter(Navbar);","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { getDateFormatted } from '../../utilities/utility';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { fetchTaskGroup } from '../../store/actions/taskGroupActions';\nimport { fetchTaskGroupData } from '../../utilities/service';\n\nclass TaskGroupList extends React.Component {\n  componentDidMount() {\n    this.props.taskGroupListFunc();\n  }\n  render() {\n    let taskGroupList = this.props.taskGroupList;\n    return (\n      taskGroupList && taskGroupList.length > 0 ? (\n        <div className=\"container mt-3\">\n          <h1 className=\"mb-3\">Task Boards</h1>\n          <div className=\"row\">\n            <Link className=\"col col-4 text-dark text-decoration-none\" to={`/create-new-board`}>\n              <div className=\"card text-center h-100 d-flex align-item-center justify-content-center\">\n                <span><FontAwesomeIcon icon={faPlus} /><br /></span>\n                <span>Create New Board</span>\n              </div>\n            </Link>\n            {\n              taskGroupList.map((item, index) => (\n                <Link className=\"col col-4 text-dark text-decoration-none\"\n                  to={`/tasks/${item._id}`} key={index}>\n                  <div className=\"card h-100\">\n                    {/* <div className=\"card-header bg-white\">\n                      <div className=\"progress\">\n                        <div className=\"progress-bar\" role=\"progressbar\" style={{ width: '25%' }}></div>\n                      </div>\n                    </div> */}\n                    <div className=\"card-body\">\n                      <h6>{item.taskName}</h6>\n                    </div>\n                    <div className=\"card-footer bg-white\">\n                      <div className=\"d-flex align-items-center justify-content-between\">\n                        <span>\n                          <img src={item.creator && item.creator.profileImage !== '' ? item.creator.profileImage :\n                            require('../../assets/img/user.png')} alt=\"profile img\" className=\"img-fluid userIcon\"\n                            title={item.creator && item.creator.name ? item.creator.name : ''} />\n                        </span>\n                        <span>{\n                          (item.endDate && item.endDate !== '') ?\n                            getDateFormatted(item.startDate) + \" - \" + getDateFormatted(item.endDate) :\n                            getDateFormatted(item.startDate)\n                        }</span>\n                      </div>\n                    </div>\n                  </div>\n                </Link>\n              ))\n            }\n          </div>\n        </div>\n      ) : null\n    )\n  }\n}\nconst mapStateToProps = (state) => ({\n  taskGroupList: state.taskGroupReducer.taskGroupData\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  taskGroupListFunc: () => {\n    dispatch(fetchTaskGroup(fetchTaskGroupData))\n  }\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskGroupList);","import React from 'react';\n\nconst User = () => (\n  <div className=\"container mt-3 mb-3\">\n    <div className=\"row\">\n      <div className=\"col col-12\">Coming soon.</div>\n    </div>\n  </div>\n)\nexport default User;","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faArrowLeft } from '@fortawesome/free-solid-svg-icons';\nimport { connect } from 'react-redux';\n\nclass CreateNewBoard extends React.Component {\n  state = {\n    taskName: '',\n    taskDesc: '',\n    startDate: '',\n    endDate: '',\n    creatorId: '',\n  }\n  componentDidMount() {\n    console.log(this.props.userReducer);\n  }\n  handleInputChange(e) {\n    this.setState({\n      [e.target.name]: e.target.value\n    })\n  }\n  handleSubmit(e) {\n    e.preventDefault();\n  }\n  render() {\n    const { history } = this.props;\n    return (\n      <div className=\"container mt-3 mb-3\">\n        <div className=\"row\">\n          <div className=\"col col-12\">\n            <div className=\"card ml-auto mr-auto\" style={{ maxWidth: '500px' }}>\n              <form className=\"card-body\" onSubmit={(e) => this.handleSubmit(e)}>\n                <h2>\n                  <button className=\"btn btn-outline-dark mr-3\" onClick={() => history.go(-1)}>\n                    <FontAwesomeIcon icon={faArrowLeft} />\n                  </button>\n                  Create New Board</h2>\n                <hr />\n                <div className=\"form-group\">\n                  <span>Task Board Name</span>\n                  <input type=\"text\" className=\"form-control\" placeholder=\"Task Name\" name=\"taskName\"\n                    value={this.state.taskName} onChange={(e) => this.handleInputChange(e)} />\n                </div>\n                <div className=\"form-group\">\n                  <span>Description</span>\n                  <input type=\"text\" className=\"form-control\" placeholder=\"Task Description\" name=\"taskDesc\"\n                    value={this.state.taskDesc} onChange={(e) => this.handleInputChange(e)} />\n                </div>\n                <div className=\"row\">\n                  <div className=\"col col-6\">\n                    <div className=\"form-group\">\n                      <span>Start Date</span>\n                      <input type=\"datetime-local\" className=\"form-control\" placeholder=\"Start Date\" name=\"startDate\"\n                        value={this.state.startDate} onChange={(e) => this.handleInputChange(e)} required />\n                    </div>\n                  </div>\n                  <div className=\"col col-6\">\n                    <div className=\"form-group\">\n                      <span>End Date</span>\n                      <input type=\"datetime-local\" className=\"form-control\" placeholder=\"Start Date\" name=\"endDate\"\n                        value={this.state.endDate} onChange={(e) => this.handleInputChange(e)} required />\n                    </div>\n                  </div>\n                </div>\n                <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\n              </form>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\nconst mapStateToProps = (state) => ({\n  userReducer: state.userReducer\n});\nconst mapDispatchToProps = (dispatch) => ({\n\n})\nexport default connect(mapStateToProps, mapDispatchToProps)(CreateNewBoard);","import { fetchAllUsers } from \"../../utilities/service\";\n\nexport const userActionTypes = {\n  LOGIN: 'LOGIN',\n  START: 'START',\n  ERROR: 'ERROR',\n  SUCCESS: 'USER_SUCCESS',\n}\nexport const setUserData = (loginStatus, userData) => ({\n  type: userActionTypes.LOGIN, loginStatus, userData\n});\nexport const fetchAllUsersActionBegins = () => ({\n  type: userActionTypes.START,\n});\nexport const fetchAllUsersActionSuccess = (payload) => ({\n  type: userActionTypes.SUCCESS,\n  payload,\n});\nexport const fetchAllUsersActionError = (payload) => ({\n  type: userActionTypes.ERROR,\n  payload,\n});\nexport const saveUserData = (data) => {\n  return dispatch => {\n    dispatch(setUserData(true, data))\n  }\n}\n\nexport const getAllUsers = () => {\n  return async dispatch => {\n    dispatch(fetchAllUsersActionBegins());\n    const usersRes = await fetchAllUsers();\n    try {\n      usersRes && usersRes.status === 1 ?\n        dispatch(fetchAllUsersActionSuccess(usersRes.data)) :\n        dispatch(fetchAllUsersActionError(usersRes));\n    }\n    catch (e) {\n      dispatch(fetchAllUsersActionError(e));\n    }\n  }\n}","import React from 'react';\nimport { Route, Redirect, withRouter } from 'react-router-dom';\nimport { authenticate } from '../utilities/service';\nimport Async from 'react-async';\nimport { connect } from 'react-redux';\nimport { saveUserData } from '../store/actions/userAction';\n\nconst PrivateRoute = ({ path, userReducer, component: Component, saveUserDataFunc, ...rest }) => {\n  return (\n    <Route\n      {...rest}\n      render={(props) => {\n        if (userReducer && userReducer.loginStatus) {\n          return <Component {...props} />\n        }\n        return <Async promiseFn={authenticate} id={localStorage.getItem('id')}>\n          {\n            ({ data, err, isLoading }) => {\n              if (isLoading) return 'Loading...';\n              if (err) return `Something went wrong: ${err.msg}`;\n              if (data != null) {\n                return <Component {...props} />\n              }\n              return <Redirect to={{\n                pathname: '/login',\n                state: { from: props.location }\n              }} />\n            }\n          }\n        </Async>\n      }}\n    />\n  );\n}\nconst mapStateToProps = (state) => ({\n  userReducer: state.userReducer\n})\nconst mapDispatchToProps = (dispatch) => ({\n  saveUserDataFunc: (data) => {\n    dispatch(saveUserData(data));\n  }\n})\nexport default connect(mapStateToProps, mapDispatchToProps)(PrivateRoute);","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect, withRouter } from 'react-router-dom';\nimport { isEmail } from '../../utilities/utility';\nimport { baseUrl, authenticate } from '../../utilities/service';\nimport { saveUserData } from '../../store/actions/userAction';\n\nclass Auth extends React.Component {\n  state = {\n    email: 'prem@gmail.com',\n    password: 'prem0501',\n    checkingLoginStatus: false,\n    from: ''\n  }\n  async componentDidMount() {\n    const userData = await authenticate({ id: localStorage.getItem('id') });\n    // console.log(this.props.location);\n    if (userData != null) {\n      return <Redirect to=\"/\" />\n    }\n    else {\n      this.setState({\n        checkingLoginStatus: true,\n        from: this.props.location.state ? this.props.location.state.from.pathname : '/'\n      })\n    }\n  }\n  handleChange(e) {\n    this.setState({\n      [e.target.name]: e.target.value\n    })\n  }\n  async proceedToLogin(e) {\n    e.preventDefault();\n    if (isEmail(this.state.email) && this.state.password !== '') {\n      const res = await fetch(`${baseUrl}/auth`, {\n        method: 'POST',\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          email: this.state.email,\n          password: this.state.password,\n        }),\n      });\n      const data = await res.json();\n      console.log(data);\n      if (data.status === 1) {\n        await this.props.saveUserDataFunc(data.data);\n      }\n      else {\n        console.log(\"error\");\n      }\n    }\n  }\n  render() {\n    const { loginStatus } = this.props.userReducer;\n    // console.log(this.props);\n    if (loginStatus) {\n      return <Redirect to={`${this.state.from}`} />\n    }\n    return this.state.checkingLoginStatus ? (\n      <div className=\"container form-container\">\n        <div className=\"row\">\n          <div className=\"col col-12\">\n            <div className=\"card\">\n              <div className=\"card-body\">\n                <h1>Login</h1>\n                <form onSubmit={(e) => this.proceedToLogin(e)}>\n                  <div className=\"form-group\">\n                    <input type=\"email\" className=\"form-control\" placeholder=\"Enter email\" value={this.state.email}\n                      onChange={e => this.handleChange(e)} name=\"email\" />\n                  </div>\n                  <div className=\"form-group\">\n                    <input type=\"password\" className=\"form-control\" placeholder=\"Password\" value={this.state.password}\n                      onChange={e => this.handleChange(e)} name=\"password\" />\n                  </div>\n                  <button type=\"submit\" className=\"btn btn-primary\">Login</button>\n                </form>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    ) : (\n        <div className=\"container mt-3\">\n          <div className=\"row\">\n            <div className=\"col col-12 mt-3\">\n              Authenticating...\n            </div>\n          </div>\n        </div>\n      );\n  }\n}\nconst matStateToProps = (state) => ({\n  userReducer: state.userReducer\n})\nconst mapDispatchToProps = (dispatch) => ({\n  saveUserDataFunc: async (data) => {\n    await dispatch(saveUserData(data));\n  }\n})\nexport default connect(matStateToProps, mapDispatchToProps)(Auth);","import React from 'react';\n\nconst page404 = () => (\n  <div className=\"container\">\n    <div className=\"row\">\n      <div className=\"col col-12\">\n        <h1>404</h1>\n        <p>Page not found</p>\n      </div>\n    </div>\n  </div>\n)\nexport default page404;","import React from 'react';\nimport { connect } from 'react-redux';\nimport { fetchTaskDetails, uploadMediaForTask, fetchAttachedPicture, removeMediaForTask, startUploadingMedia, setEditingTask } from '../../store/actions/taskDetailActions';\nimport { priorities } from '../../utilities/utility';\nimport { baseUrl } from '../../utilities/service';\nimport { toggleTaskStatus } from '../../store/actions/taskListActions';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPencilAlt, faArrowLeft } from '@fortawesome/free-solid-svg-icons';\n\nclass TaskDetails extends React.Component {\n  state = {\n    editingInput: '',\n    status: false,\n    uploadMedia: false,\n    inputMediaUrl: '',\n    inputMediaName: '',\n    file: '',\n    error: '',\n    editTaskFlag: false,\n  }\n  componentDidMount() {\n    this.props.getTaskDetails(this.props.match.params.id);\n    this.props.getAttachedPictures(this.props.match.params.id);\n  }\n  handleFileChange(e) {\n    const files = e.target.files;\n    if (files && files[0]) {\n      const file = files[0];\n      let maxFileSize = 0;\n      if (/image/.test(file.type)) {\n        maxFileSize = 5;\n      } else if (/video/.test(file.type)) {\n        maxFileSize = 50;\n      } else {\n        this.setState({\n          error: 'Only images and videos allowed'\n        });\n        return;\n      }\n      console.log(file);\n      if (file.size / (1024 * 1024) <= maxFileSize) {\n        const reader = new FileReader();\n        reader.onload = (ev) => {\n          this.setState({\n            inputMediaUrl: ev.target.result,\n            inputMediaName: file.name,\n            file: file,\n            error: '',\n          })\n        }\n        reader.readAsDataURL(file);\n      }\n      else {\n        this.setState({\n          error: 'Maximum file size exceeded'\n        })\n      }\n    }\n  }\n  closeEditForm() {\n    this.setState({\n      editTaskFlag: false\n    })\n  }\n  upload(e, id) {\n    e.preventDefault();\n    this.props.uploadMediaForTaskFunc(id, this.state.file);\n  }\n  render() {\n    const { taskDetailsReducer, toggleTaskStatus, removeMediaForTaskFunc, uploadMedia, setEditingTaskFunc, history } = this.props;\n    const { taskDetails, taskMedia, uploadMediaStatus } = taskDetailsReducer;\n    return (\n      taskDetails ? (\n        <div className=\"container mt-3 mb-3 taskDetails\">\n          <div className=\"row\">\n            <div className=\"col col-8\">\n              <div className=\"card w-100\">\n                <div className=\"card-body\">\n                  <h2 className=\"text-capitalised mb-3\">\n                    <button className=\"btn btn-outline-dark mr-3\" onClick={() => history.go(-1)}>\n                      <FontAwesomeIcon icon={faArrowLeft} />&nbsp;Task List\n                    </button>\n                    <button className=\"btn btn-outline-dark btn-sm editBtn\"\n                      onClick={() => setEditingTaskFunc(taskDetails, history)}>\n                      <FontAwesomeIcon icon={faPencilAlt} />\n                    </button>\n                  </h2>\n                  <h2 className=\"text-capitalised mb-3\">\n                    <span>\n                      {taskDetails.subTaskName}\n                    </span>\n                  </h2>\n                  <p className=\"title-header\">Description</p>\n                  {\n                    taskDetails.subTaskDesc ? (\n                      <p>{taskDetails.subTaskDesc}</p>\n                    ) :\n                      <button className=\"btn btn-light w-100 text-left text-light border-0\">Add a description</button>\n                  }\n                  <div className=\"row mb-3\">\n                    <div className=\"col col-12\">\n                      <p className=\"title-header\">Attached Pictures</p>\n                      {\n                        taskMedia && taskMedia.length > 0 ? (\n                          <div className=\"row\">\n                            {\n                              taskMedia.map((item, index) => (\n                                <div className=\"col col-6 mb-3 picture\" key={index}>\n                                  <div className=\"imgWrapper\" style={{\n                                    backgroundImage: `url(${baseUrl}/${item.path})`\n                                  }}>\n                                    <p>{item.filename}</p>\n                                    <button className=\"btn btn-danger deleteBtn\"\n                                      onClick={() => removeMediaForTaskFunc(taskDetails._id, item._id)}>&times;</button>\n                                  </div>\n                                </div>\n                              ))\n                            }\n                          </div>\n                        ) : ''\n                      }\n                      <button className=\"btn btn-outline-dark\"\n                        onClick={() => uploadMedia(!uploadMediaStatus)}>Upload Pictures</button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div className=\"col col-4\">\n              <div className=\"card w-100\">\n                <div className=\"card-body\">\n                  <div className=\"row mb-3\">\n                    <div className=\"col col-12\">\n                      <p className=\"title-header\">Status</p>\n                      <h6 className=\"m-0 d-flex align-items-center\">\n                        <label className=\"cb-container\" title=\"Update status\">\n                          <input type=\"checkbox\" onChange={() => toggleTaskStatus(taskDetails._id, !taskDetails.status)}\n                            checked={taskDetails.status || this.state.status} />\n                          <span className=\"checkmark\"></span>\n                        </label>\n                        <span>{taskDetails.status ? 'Completed' : 'Pending'}</span>\n                      </h6>\n                    </div>\n                  </div>\n                  {\n                    taskDetails.assignee ? (\n                      <div className=\"row mb-3\">\n                        <div className=\"col col-12\">\n                          <p className=\"title-header\">ASSIGNEE</p>\n                          <h6>{taskDetails.assignee.assigneeName}</h6>\n                        </div>\n                      </div>\n                    ) : null\n                  }\n                  {\n                    taskDetails.reporter ? (\n                      <div className=\"row mb-3\">\n                        <div className=\"col col-12\">\n                          <p className=\"title-header\">Reporter</p>\n                          <h6>{taskDetails.reporter.reporterName}</h6>\n                        </div>\n                      </div>\n                    ) : null\n                  }\n                  {\n                    taskDetails.priority ? (\n                      <div className=\"row mb-3\">\n                        <div className=\"col col-12\">\n                          <p className=\"title-header\">Priority</p>\n                          <h6>\n                            <span className={`badge ${taskDetails.priority === 0 ?\n                              'badge-info' : (taskDetails.priority === 1) ? 'badge-warning' : 'badge-danger'} text-uppercase`}\n                            >{priorities[taskDetails.priority]}</span>\n                          </h6>\n                        </div>\n                      </div>\n                    ) : null\n                  }\n                  <div className=\"row\">\n                    <div className=\"col col-12 text-light\">\n                      {\n                        taskDetails.createdOn ? (\n                          <p className=\"mb-1\"><small>Created {\n                            new Date(taskDetails.createdOn).toLocaleDateString() + ' ' +\n                            new Date(taskDetails.createdOn).toLocaleTimeString()\n                          }</small></p>\n                        ) : null\n                      }\n                    </div>\n                    <div className=\"col col-12 text-light\">\n                      {\n                        taskDetails.createdOn ? (\n                          <p className=\"m-0\"><small>Updated {\n                            new Date(taskDetails.updatedOn).toLocaleDateString() + ' ' +\n                            new Date(taskDetails.updatedOn).toLocaleTimeString()\n                          }</small></p>\n                        ) : null\n                      }\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n          {\n            uploadMediaStatus ? (\n              <div className=\"uploadMediaForm\">\n                <form onSubmit={(e) => this.upload(e, taskDetails._id)}>\n                  <h3>Upload Media for the task</h3>\n                  <div className=\"input-group mb-3 mt-3\">\n                    <div className=\"custom-file\">\n                      <input type=\"file\" className=\"custom-file-input\" accept=\"image/*\"\n                        id=\"inputGroupFile01\" onChange={(e) => this.handleFileChange(e)} />\n                      <label className=\"custom-file-label\" htmlFor=\"inputGroupFile01\">{\n                        this.state.inputMediaName ? this.state.inputMediaName : 'Choose file'\n                      }</label>\n                    </div>\n                  </div>\n                  {\n                    this.state.error !== '' ? (\n                      <p className=\"text-danger\">{this.state.error}</p>\n                    ) : ''\n                  }\n                  {\n                    this.state.inputMediaUrl ?\n                      <img src={this.state.inputMediaUrl} alt={this.state.inputMediaName} className=\"img-fluid\" />\n                      : ''\n                  }\n                  <div className=\"input-group mt-3\">\n                    <button className=\"btn btn-primary\" type=\"submit\">Upload</button>\n                    <button className=\"btn btn-link-danger\" type=\"reset\"\n                      onClick={() => uploadMedia(!uploadMediaStatus)}>Close</button>\n                  </div>\n                </form>\n              </div>\n            ) :\n              \"\"\n          }\n        </div>\n      ) : null\n    );\n  }\n}\nconst mapStateToProps = (state) => ({\n  taskDetailsReducer: state.taskDetailsReducer,\n})\nconst mapDispatchToProps = (dispatch) => ({\n  getTaskDetails: (id) => {\n    dispatch(fetchTaskDetails(id));\n  },\n  getAttachedPictures: (id) => {\n    dispatch(fetchAttachedPicture(id));\n  },\n  uploadMediaForTaskFunc: (id, file) => {\n    dispatch(uploadMediaForTask(id, file));\n  },\n  removeMediaForTaskFunc: (taskId, id) => {\n    dispatch(removeMediaForTask(taskId, id));\n  },\n  toggleTaskStatus: (id, status) => {\n    dispatch(toggleTaskStatus(id, status));\n  },\n  uploadMedia: (flag) => {\n    dispatch(startUploadingMedia(flag))\n  },\n  setEditingTaskFunc: (taskData, _history) => {\n    dispatch(setEditingTask(taskData));\n    _history.push(`/edit-task/1/${taskData._id}`);\n  }\n})\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskDetails);","import React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faArrowLeft } from '@fortawesome/free-solid-svg-icons';\n\nconst TaskForm = ({ taskData, handleInputChange, allUsers, handleUserChange, handleSubmit, history, toggleTaskStatus }) => {\n  const { subTaskName, subTaskDesc, status, startDate, endDate, priority, assigneeId } = taskData;\n  return (\n    <form className=\"card-body\" onSubmit={(e) => handleSubmit(e)}>\n      <h2>\n        <button className=\"btn btn-outline-dark mr-3\" onClick={() => history.go(-1)}>\n          <FontAwesomeIcon icon={faArrowLeft} />\n        </button>\n        Edit Task</h2>\n      <hr />\n      <div className=\"form-group\">\n        <span>Task Name</span>\n        <input type=\"text\" className=\"form-control\" placeholder=\"Task Name\" name=\"subTaskName\"\n          value={subTaskName} onChange={(e) => handleInputChange(e)} />\n      </div>\n      <div className=\"form-group\">\n        <span>Description</span>\n        <input type=\"text\" className=\"form-control\" placeholder=\"Task Description\" name=\"subTaskDesc\"\n          value={subTaskDesc} onChange={(e) => handleInputChange(e)} />\n      </div>\n      <h6 className=\"form-group d-flex align-items-center justify-content-between\">\n        <span>Task Status</span>\n        <span className=\" d-flex align-items-center justify-content-between\">\n          <label className=\"cb-container\" title=\"Update status\">\n            <input type=\"checkbox\" name=\"status\" onChange={() => toggleTaskStatus(!status)}\n              checked={status} />\n            <span className=\"checkmark\"></span>\n          </label>\n          <span>{status ? 'Completed' : 'Pending'}</span>\n        </span>\n      </h6>\n      <div className=\"row\">\n        <div className=\"col col-6\">\n          <div className=\"form-group\">\n            <span>Start Date</span>\n            <input type=\"datetime-local\" className=\"form-control\" placeholder=\"Start Date\" name=\"startDate\"\n              value={startDate} onChange={(e) => handleInputChange(e)} required />\n          </div>\n        </div>\n        <div className=\"col col-6\">\n          <div className=\"form-group\">\n            <span>End Date</span>\n            <input type=\"datetime-local\" className=\"form-control\" placeholder=\"Start Date\" name=\"endDate\"\n              value={endDate} onChange={(e) => handleInputChange(e)} required />\n          </div>\n        </div>\n      </div>\n      <div className=\"form-group\">\n        <span>Priority</span>\n        <select name=\"priority\" value={priority} className=\"form-control\"\n          onChange={(e) => handleInputChange(e)}>\n          <option value=\"-1\" disabled={priority < 0}>Select priority</option>\n          <option value=\"0\">Low</option>\n          <option value=\"1\">Medium</option>\n          <option value=\"2\">High</option>\n        </select>\n      </div>\n      <div className=\"form-group\">\n        <span>Select Assignee</span>\n        <select name=\"assigneeId\" value={assigneeId} className=\"form-control\"\n          onChange={(e) => handleUserChange(e)}>\n          <option value=\"\" disabled={assigneeId === ''}>Select assignee</option>\n          {\n            allUsers && allUsers.map((user, index) => (\n              <option value={user._id} key={index}>{user.name}</option>\n            ))\n          }\n        </select>\n      </div>\n      <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\n    </form>\n  )\n}\nexport default withRouter(TaskForm);","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { getAllUsers } from '../../store/actions/userAction';\nimport { updateTaskDetails } from '../../store/actions/taskDetailActions';\nimport TaskForm from './TaskForm';\n\nclass EditTask extends React.Component {\n  state = {\n    _id: '',\n    subTaskName: '',\n    subTaskDesc: '',\n    status: false,\n    startDate: '',\n    endDate: '',\n    priority: -1,\n    assignee: null,\n    assigneeId: '',\n    taskBoardId: -1,\n  }\n  handleInputChange(e) {\n    this.setState({\n      [e.target.name]: e.target.value\n    })\n  }\n  handleUserChange(e) {\n    const { allUsers } = this.props;\n    const name = e.target.name;\n    const value = e.target.value;\n    const assignee = allUsers.filter(user => user._id === value)[0];\n    console.log(assignee);\n    this.setState({\n      [name]: value,\n      assignee: {\n        assigneeId: assignee._id,\n        assigneeName: assignee.name,\n        profileImage: assignee.profileImage,\n      }\n    })\n  }\n  extractData(editingTask, action) {\n    if (action === '1') {\n      let { _id, subTaskName, subTaskDesc, status, startDate, endDate, priority, assignee, taskBoardId } = editingTask;\n      let assId = '';\n      if (assignee) {\n        assId = assignee.assigneeId;\n      }\n      this.setState({\n        _id: _id || '',\n        subTaskName: subTaskName || '',\n        subTaskDesc: subTaskDesc || '',\n        status: status || false,\n        startDate: startDate.indexOf('.') < 0 ? startDate : startDate.substring(0, startDate.indexOf('.')) || '',\n        endDate: endDate.indexOf('.') < 0 ? endDate : endDate.substring(0, endDate.indexOf('.')) || '',\n        priority: priority || -1,\n        assignee: assignee || null,\n        taskBoardId: taskBoardId || -1,\n        assigneeId: assId\n      });\n    }\n    this.props.getAllUsersFunc();\n  }\n  componentDidMount() {\n    const { editingTask, history, match } = this.props;\n    if (match.params.action === '1' && editingTask == null) {\n      history.go(-1);\n      return;\n    }\n    this.extractData(editingTask, match.params.action);\n  }\n  handleSubmit(e) {\n    e.preventDefault();\n    if (this.state.subTaskName !== '' && this.state.subTaskDesc !== '' &&\n      this.state.startDate !== '' && this.state.endDate !== '' &&\n      this.state.assigneeId !== '' && this.state.assignee !== null) {\n      const { match, history } = this.props;\n      const taskData = { ...this.state };\n      delete taskData['assigneeId'];\n      if (match.params.action === '0') {\n        taskData.taskBoardId = match.params.taskBoardId;\n        delete taskData['_id'];\n      }\n      this.props.updateTaskDetailsFunc(taskData, match.params.action, history);\n    }\n  }\n  getRespMsg(taskUpdateRes, history) {\n    if (taskUpdateRes == null) {\n      return (\n        <p className=\"text-dark m-0\">Fetching task details..</p>\n      );\n    } else {\n      if (taskUpdateRes.status === 1) {\n        const timr = setTimeout(() => {\n          history.go(-1);\n          clearTimeout(timr);\n        }, 3000);\n        return <p className=\"text-success m-0\">Task updated successfully, redirecting to detail page..</p>;\n      }\n      else {\n        return <p className=\"text-danger m-0\">An error occured while updating task data.\n        Please check your internet connection or try after sometime.\n        Click <Link to='/'>Here</Link> to go back to home page.</p>\n      }\n    }\n  }\n  toggleTaskStatus(status) {\n    this.setState({ status });\n  }\n  render() {\n    const { editingTask, allUsers, taskUpdateRes, history, match } = this.props;\n    // console.log(match);\n    return (\n      <div className=\"container-fluid editTask\">\n        <div className=\"card\">\n          {\n            ((editingTask == null || allUsers == null) && (match && match.params.action !== '0')) ? (\n              this.getRespMsg(taskUpdateRes, history)\n            ) : (\n                <TaskForm\n                  taskData={this.state}\n                  handleInputChange={(e) => this.handleInputChange(e)}\n                  handleUserChange={(e) => this.handleUserChange(e)}\n                  handleSubmit={(e) => this.handleSubmit(e)}\n                  allUsers={allUsers}\n                  toggleTaskStatus={status => this.toggleTaskStatus(status)} />\n              )\n          }\n        </div>\n      </div>\n    )\n  }\n}\nconst mapStateToProps = (state) => ({\n  editingTask: state.taskDetailsReducer.editingTask,\n  allUsers: state.userReducer.allUsers,\n  taskUpdateRes: state.taskDetailsReducer.taskUpdateRes,\n});\nconst mapDispatchToProps = (dispatch) => ({\n  getAllUsersFunc: () => {\n    dispatch(getAllUsers());\n  },\n  updateTaskDetailsFunc: (data, action, history) => {\n    dispatch(updateTaskDetails(data, action));\n    if (action === '0')\n      history.go(-1);\n  },\n});\nexport default connect(mapStateToProps, mapDispatchToProps)(EditTask);","import React from 'react';\nimport { HashRouter, Switch, Route, Redirect } from 'react-router-dom';\nimport './assets/scss/App.scss';\nimport TaskGroup from './components/Task/TaskGroup';\nimport Navbar from './components/Navbar/Navbar';\nimport TaskGroupList from './components/Task/TaskGroupList';\nimport User from './components/User/User';\nimport CreateNewBoard from './components/Task/CreateNewBoard';\nimport PrivateRoute from './components/PrivateRoute';\nimport Auth from './components/User/Auth';\nimport page404 from './components/404';\nimport { authenticate } from './utilities/service';\nimport Async from 'react-async';\nimport { connect } from 'react-redux';\nimport TaskDetails from './components/Task/TaskDetails';\nimport EditTask from './components/Task/EditTask';\nimport { saveUserData } from './store/actions/userAction';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <HashRouter>\n          <Navbar />\n          <Switch>\n            <PrivateRoute exact path=\"/\" component={TaskGroupList} />\n            <PrivateRoute path=\"/tasks/:id\" component={TaskGroup} />\n            <PrivateRoute path=\"/task-details/:id\" component={TaskDetails} />\n            <PrivateRoute path=\"/edit-task/:action/:id\" component={EditTask} />\n            <PrivateRoute path=\"/add-task/:action/:taskBoardId\" component={EditTask} />\n            <PrivateRoute path=\"/my-tasks\" component={User} />\n            <PrivateRoute path=\"/create-new-board\" component={CreateNewBoard} />\n            <Route path=\"/login\" render={(props) => {\n              return <Async promiseFn={authenticate} id={localStorage.getItem('id')}>\n                {\n                  ({ data, err, isLoading }) => {\n                    if (isLoading) return 'Loading...';\n                    if (err) return `Something went wrong: ${err.msg}`;\n                    if (data != null)\n                      this.props.saveUserDataFunc(data);\n                    return data == null ?\n                      (\n                        <Auth {...props} />\n                      ) :\n                      (\n                        <Redirect to=\"/\" />\n                        // return ''\n                      )\n                  }\n                }\n              </Async>\n            }} />\n            <Route component={page404} />\n          </Switch>\n        </HashRouter>\n      </div>\n    );\n  }\n}\nconst mapStateToProps = (state) => ({\n  userReducer: state.userReducer\n})\nconst mapDispatchToProps = (dispatch) => ({\n  saveUserDataFunc: (data) => {\n    dispatch(saveUserData(data));\n  }\n})\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { fetchTaskGroupActions } from \"../actions/taskGroupActions\";\nimport { taskGroupData } from \"../../assets/json/task\";\n\nconst _taskGroupState = {\n  taskGroupData,\n  currentFilter: '',\n  order: false,\n  view: false,\n  taskGroupId: -1,\n  taskListItemId: -1,\n}\n\nconst taskGroupReducer = (taskGroupState = _taskGroupState, action) => {\n  switch (action.type) {\n    case fetchTaskGroupActions.SUCCESS:\n      return { ...taskGroupState, taskGroupData: action.payload };\n    case fetchTaskGroupActions.DETAILS:\n      return { taskGroupData: action.payload };\n    default:\n      return { ...taskGroupState };\n  }\n}\n\nexport default taskGroupReducer;","\nexport const taskGroupData = [\n  {\n    id: 0,\n    taskName: 'Marketing Compaign',\n    startDate: '6/5/2019',\n    endDate: '6/26/2019',\n    creator: {\n      name: 'Max',\n      id: 11,\n      profileImage: ''\n    },\n    taskList: [\n      {\n        id: 0,\n        subTaskName: 'Compaign Messaging',\n        status: false,\n        startDate: '6/14/2019',\n        endDate: '6/20/2019',\n        priority: 1,\n        assignee: {\n          name: 'John Doe',\n          id: 123,\n          profileImage: ''\n        }\n      },\n      {\n        id: 1,\n        subTaskName: 'Media Plan',\n        status: false,\n        startDate: '6/25/2019',\n        endDate: '6/26/2019',\n        priority: 2,\n        assignee: {\n          name: 'Prem Chand',\n          id: 125,\n          profileImage: ''\n        }\n      },\n      {\n        id: 2,\n        subTaskName: 'Select Agency',\n        status: false,\n        startDate: '6/5/2019',\n        endDate: '6/6/2019',\n        priority: 1,\n        assignee: {\n          name: 'Prem Chand',\n          id: 125,\n          profileImage: ''\n        }\n      }\n    ]\n  }\n]","import { fetchTaskListActions, taskListActionTypes } from \"../actions/taskListActions\";\n\nconst sortTaskListing = (taskGroupState, currentTaskId, sortingFunc, order) => {\n  const _taskGroup = { ...taskGroupState[currentTaskId] };\n  const _taskList = _taskGroup.taskList;\n  const s = sortingFunc(_taskList, order);\n  const n = [...taskGroupState];\n  n.forEach(task => {\n    if (task.id === currentTaskId) {\n      task = s\n    }\n  })\n  return n;\n}\n\nconst _taskListState = {\n  taskListData: [],\n  currentFilter: '',\n  order: false,\n  view: localStorage.getItem('view') && localStorage.getItem('view') !== '' ? localStorage.getItem('view') === 'true' : false,\n  taskGroupId: -1,\n  draggingTask: {\n    id: -1,\n    status: false,\n    taskBoardId: '',\n  },\n}\n\nconst taskListReducer = (taskListState = _taskListState, action) => {\n  const { taskListData } = taskListState;\n  let sorted = [];\n  switch (action.type) {\n    case fetchTaskListActions.SUCCESS:\n      return { ...taskListState, taskListData: action.payload };\n    case taskListActionTypes.DUE_DATE:\n      sorted = taskListData.sort((prev, curr) => new Date(prev.startDate).getTime() - new Date(curr.startDate).getTime());\n      return { ...taskListState, td: action.order ? sorted : sorted.reverse(), currentFilter: action.type, order: !action.order };\n    case taskListActionTypes.PRIORITY:\n      sorted = taskListData.sort((prev, curr) => prev.priority - curr.priority);\n      return { ...taskListState, taskListData: action.order ? sorted : sorted.reverse(), currentFilter: action.type, order: !action.order };\n    case taskListActionTypes.USER:\n      sorted = taskListData.sort((prev, curr) => prev.assignee.assigneeName - curr.assignee.assigneeName);\n      return { ...taskListState, taskListData: action.order ? sorted : sorted.reverse(), currentFilter: action.type, order: !action.order };\n    case taskListActionTypes.TOGGLE_VIEW:\n      localStorage.setItem('view', !taskListState.view);\n      return { ...taskListState, view: !taskListState.view }\n    case taskListActionTypes.DRAG_START:\n      return { ...taskListState, draggingTask: action.task }\n    default:\n      return { ...taskListState };\n  }\n}\n\nexport default taskListReducer;","import { userActionTypes } from \"../actions/userAction\";\n\nconst initialState = {\n  loginStatus: false,\n  userData: null,\n  allUsers: [],\n}\n\nconst userReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case userActionTypes.LOGIN:\n      console.log(action)\n      if (action.userData && !action.userData.hasOwnProperty('_id')) {\n        return { ...state };\n      }\n      localStorage.setItem('id', action.userData._id);\n      return { ...state, loginStatus: action.loginStatus, userData: action.userData };\n    case userActionTypes.SUCCESS:\n      return { ...state, allUsers: action.payload }\n    default: return { ...state };\n  }\n}\nexport default userReducer;","import { fetchTaskDetailsActions, fetchTaskMediaActions } from \"../actions/taskDetailActions\";\n\nconst _taskDetailState = {\n  taskDetails: {},\n  taskMedia: {},\n  status: false,\n  uploadMediaStatus: false,\n  editingTask: null,\n  taskUpdateRes: {\n    status: -1,\n    msg: '',\n    data: null,\n  },\n}\n\nconst taskDetailsReducer = (taskDetailState = _taskDetailState, action) => {\n  switch (action.type) {\n    case fetchTaskDetailsActions.SUCCESS:\n      return { ...taskDetailState, taskDetails: action.payload, editingTask: null, taskUpdateRes: null };\n    case fetchTaskDetailsActions.EDITING_TASK:\n      return { ...taskDetailState, editingTask: action.taskData };\n    case fetchTaskMediaActions.SUCCESS:\n      return { ...taskDetailState, taskMedia: action.payload, uploadMediaStatus: false };\n    case fetchTaskMediaActions.UPLOAD:\n      return { ...taskDetailState, uploadMediaStatus: action.uploadMediaStatus };\n    case fetchTaskDetailsActions.TASK_UPDATED:\n      return { ...taskDetailState, editingTask: null, taskUpdateRes: action.payload };\n    case fetchTaskDetailsActions.ERROR:\n      return { ...taskDetailState, editingTask: null, taskUpdateRes: { status: 0, msg: '', data: null } };\n    default:\n      return { ...taskDetailState };\n  }\n}\n\nexport default taskDetailsReducer;","import { combineReducers } from 'redux';\nimport taskGroupReducer from './taskGroupReducer';\nimport taskListReducer from './taskListReducer';\nimport userReducer from './userReducer';\nimport taskDetailsReducer from './taskDetailsReducer';\n\nexport const rootReducer = combineReducers({\n  taskGroupReducer,\n  taskListReducer,\n  userReducer,\n  taskDetailsReducer\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/scss/index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { rootReducer } from './store/reducers';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\n\nconst store = createStore(rootReducer, compose(\n  applyMiddleware(thunk),\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n));\n\nReactDOM.render(<Provider store={store}>\n  <App />\n</Provider>, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}